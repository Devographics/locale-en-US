locale: en-US
translations:
  - key: general.css2025.html2025_banner
    t: |
      Take the State of HTML survey and help shape the future of the web! →

  - key: general.css2025.survey_intro
    t: |

      There is only one item on my CSS wishlist for 2025: a slower pace!

      After years of rapid innovation, now feels like the right time for browser vendors to take a beat to consolidate, fix browser inconsistencies, and let the rest of us catch up.  

      After all, we might've heard about subgrid, `:has()`, scroll-driven animations, and all the other recent CSS improvements – but how many of us can say that we've actually used all these features, let alone mastered them?

      This is why this year's survey will be so interesting. It'll be a chance to see which of the past few year's new CSS additions have already been adopted by the community, and which ones are still on our to-do list. 

      So once again, please join me for this year's State of CSS!

  - key: introduction.css2025
    t: |
      <span class="first-letter">O</span>ne could be forgiven for being slow to adopt all these new-fangled CSS features. After all, do we really need them? And even if we do, do they even work reliably across browsers?


      But as Baseline indicators turn to green one after the other, and satisfaction with new functions and properties remains high, even the most reluctant among us might have to admit that features such as `:has()`, `aspect-ratio`, and Cascade Layers have all earned their spot in our stylesheets. 


      The only question is *when*. Too soon, and you'll run head-first into early-adopter pain points. Too late, and you'll miss out on time-saving improvements.


      Thankfully there is now a robust ecosystem of tools and resources dedicated to answering this question–starting with this very survey!


      <span class="conclusion__byline">– Sacha Greif</span>

  ###########################################################################
  # Charts
  ###########################################################################

  - key: features.features_intro_css2025
    aliasFor: features.features_intro_css2024

  ###########################################################################
  # Sections Introductions
  ###########################################################################

  - key: sections.user_info.description.css2025
    t: |
      This year's survey reached **5,506** developers throughout the world.

  - key: sections.features.description.css2025
    t: |
      It's no secret that CSS is adding new features at a record rate – which is why we ended up asking about no less than *50* of them this year!

  - key: sections.tools.css2025
    t: Libraries & Tools

  - key: sections.tools.description.css2025
    t: |
      Despite the many capabilities unlocked by CSS's new features, developers still rely on tooling and libraries to support their workflow, at least for now.

  - key: sections.usage.description.css2025
    t: |
      No matter how you use CSS, the data shows that making sure your code works across all browsers is still a concern, especially for newer features such as `:has()`.

  - key: sections.resources.description.css2025
    t: |
      Rest assured: with the amount of new CSS features coming out, we won't run out of material for CSS blog posts, podcasts, videos, and courses anytime soon!

  ###########################################################################
  # Takeaways
  ###########################################################################

  # - key: user_info.country.takeaway.css2025
  #   t: >
  #     The survey remains U.S.-centric, but European countries continue

  - key: features.all_features.takeaway.css2025
    t: >
      Of all the features included in the survey, `:has()` is both the most-used and the most-loved one. Also worth pointing out: **Subgrid** gets second place in the most-loved rankings, while `aspect-ratio` is #2 in usage and #3 in sentiment.


      After **Subgrid**, `line-clamp` got the most comments, many of them from respondents with a negative opinion of the feature.


      The least-used features were `sibling-count` and `sibling-index`, which makes sense since their browser support is still very new and limited. And the least-loved feature overall was **Trigonometric Functions**… no doubt due to the “trigonometry” part!


      Finally, be sure to filter by **“Widely Available” Baseline Status** to see what features are available to use right now!

  - key: features.features_ratios_over_time.takeaway.css2025
    t: >
      Looking at trends over time and in context paints quite an interesting picture. The feature with the single largest year-over-year usage increase is `text-wrap: pretty`, while the one with the largest *awareness* increase is `light-dark()`.


      **Color functions** also stand out for placing towards the bottom of the chart in terms of usage, which might mean they haven't yet found their audience.


      Finally, the Appreciation tab lets us look at the difference in positivity between respondents interested in a feature and those who have actually used it. **Anchor positioning** shows a **-12%** drop-off, which could mean that the API isn't as user-friendly as people expect.

  - key: features.layout_pain_points.takeaway.css2025
    t: >
      While **Grid** is undeniably powerful, that power also comes with a steep learning curve that can turn using this fairly complex feature into a real pain point. 


      Further down the rankings, dealing with height, overflow, positioning, and alignment still all prove to be common issues for CSS developers.

  - key: features.shapes_graphics_pain_points.takeaway.css2025
    t: >
      Now that we're fairly comfortable with rectangles, we've started looking towards the wider world of triangles, circles, and polygons. Sadly drawing these **complex shapes** remains tough with CSS only. 


      Which is why many of us resort to **SVG**–which is not without its own issues.

  - key: features.colors_pain_points.takeaway.css2025
    t: >
      Many respondents would like CSS to go beyond the light/dark dichotomy, and actually provide more tools for managing full-fledged theming, as well as do a better job ensuring proper **contrast** when picking colors.  


      And while new color spaces such as `oklch()` are certainly powerful, they also come with their own range of issues.

  - key: features.interactions_pain_points.takeaway.css2025
    t: >
      While many of us are waiting for better browser support for **scroll-driven animations**, others are pointing out potential **accessibility issues** with new interaction patterns such as **carousels**.


      Another common pain point was the difficulty of “animating to `auto`”, something that is thankfully [now possible](https://developer.chrome.com/docs/css-ui/animate-to-height-auto)!

  - key: features.typography_pain_points.takeaway.css2025
    t: >
      Controlling vertical text alignment (a.k.a. **leading**) in the browser has been an issue for as long as I can remember. Thankfully `text-box-edge` and `text-box-trim` promise to give us more granular tools to properly set type online.

  - key: features.math_features_pain_points.takeaway.css2025
    t: >
      Many respondents has gripes about `calc()`, especially when it comes to handling units inside calculations.

  - key: features.other_features_pain_points.takeaway.css2025
    t: >
      No surprise here, but **Browser Support** remains the top pain point for the CSS features mentioned in this section.

  - key: features.reading_list.takeaway.css2025
    t: >
      Little-known `::target-text` (only 82% of respondents had never heard of it) tops the Reading List rankings of the features respondents were most curious about.

  # other_tools

  - key: tools.css_frameworks.takeaway.css2025
    t: >
      Tailwind tops the framework rankings, although many also use a custom or in-house framework. 


      That being said, it's also worth nothing that **47%** of survey respondents either don't use a framework, or skipped the question altogether.

  - key: tools.css_in_js.takeaway.css2025
    t: >
      **CSS Modules**' fairly light touch continues to prove popular, while **Styled Components** still holds on at number two.

  - key: tools.pre_post_processors.takeaway.css2025
    t: >
      **Sass** is still number one, but pre-processor usage overall is slowly decreasing as CSS itself adopts more and more of their features.

  - key: tools.utilities.takeaway.css2025
    t: >
      Using **Prettier** is a safe bet for any developer–but the list below contains many other lesser-known tools that are also worth checking out.

  - key: tools.browsers.takeaway.css2025
    t: >
      When it comes to browsers, the big four are the big four for a reason, and they maintained almost identical usage numbers compared to last year.

  # usage

  - key: usage.form_factors.takeaway.css2025
    t: >
      While testing environments don't show much change year over year, it's encouraging to see a small increase in respondents testing with keyboard-only and screen readers.

  - key: usage.what_do_you_use_css_for.takeaway.css2025
    t: >
      While CSS started its life as a document layout system, it's now clear that interactive apps represent its primary use case–a fact that has been no doubt driving the language's recent evolution.

  - key: usage.industry_sector.takeaway.css2025
    t: >
      Many of us are building tools destined to be used internally within the developer community, which makes it much easier to adopt new features without worrying as much about browser compatibility.

  - key: usage.css_interoperability_features.takeaway.css2025
    t: >
      Not only did **Anchor Positioning** keep its number one spot, but the percentage of respondents citing it almost doubled.


      The **View Transition API** also climbed to number 3, while **Container style queries** gained a whopping **11 spots** in the rankings.


      On the other hand, **CSS Nesting** and `:has()` both lost ground, which makes sense since these features are now supported in all major browsers.

  - key: usage.css_missing_features.takeaway.css2025
    t: >
      **Mixins** are still the feature developers wish for the most, closely followed by **Masonry Layout**. Both have long been possible using workarounds such as pre-processors or JavaScript, but it would be nice to see them natively supported in CSS!

  - key: usage.css_general_pain_points.takeaway.css2025
    t: >
      **Browser Support** may still be the dominant CSS pain point in 2025, but the fact that only a relatively small 10% of question respondents mentioned it is a testament to recent improvements in this domain.

  - key: usage.favorite_new_features.takeaway.css2025
    t: >
      While `:has()` is still number one, it did lose a bit of ground, as the **View Transition API** and especially **Anchor Positioning** (which gained 8 spots) start seeing wider adoption.

  - key: usage.gamechanger_feature.takeaway.css2025
    t: >
      Every new CSS feature has its use, but only a few of them are real game-changers. It turns out **Grid**, `:has()`, and **CSS Nesting** are the features that most changed how we write CSS in recent years.

  - key: usage.baseline_awareness.takeaway.css2025
    t: >
      We wanted to see how familiar respondents are with the Baseline browser compatibility indicator (which you can see in use throughout these very survey results!).


      Despite our clever traps in the form of fake answers, the vast majority of you successfuly negotiated the question!

  - key: usage.css_pace_of_change.takeaway.css2025
    t: >
      Adopting a new feature is usually a multi-stage process: first, you hear about it a few times over the course of months or years, until you form a solid idea of what it does. Then, you might try it out on an experimental side project, before finally adopting it in production. 


      This chart shows that most of us are squarely in the middle of this journey, having learned about and tried out only part of the feature set presented in this survevy.

  - key: usage.state_of_the_web_happiness.takeaway.css2025
    t: >
      Happiness with the web has been fairly stable over the past years, neither going up or down.

  - key: usage.state_of_css_happiness.takeaway.css2025
    t: >
      On the other hand, happiness with CSS specifically shows a clear upwards trend in recent years, which happens to align nicely with the language's own rapid pace of improvement.

  # resources
  - key: resources.podcasts.takeaway.css2025
    t: >
      **Syntax** still rules the podcast landscape, and it even found a way to add a sizable **+8%** listeners! 


      Honorable mentions go to **Kevin Powell's podcast** and **Podrocket**, both of which gained 4 places.

  - key: resources.video_creators.takeaway.css2025
    t: >
      **Kevin Powell** has carved out a niche as the CSS king of YouTube, but creators with a more generalist focus such as **Theo** and **The Primeagen** are hot on his heels. 


      **Syntax** is also continuing its successful transition to video, gaining **5%** and **5 ranks** compared to last year.

  - key: resources.people.takeaway.css2025
    t: >
      **Josh**, **Kevin**, **Adam**, and **Una** continue to dominate the top of the CSS influencer rankings–as shown by the fact that you knew who I was talking about without even mentioning their last names.

  - key: resources.web_platform_resources.takeaway.css2025
    t: >
      **MDN** is a wonderful free resource to learn about CSS, but it's by no means the only one, as shown by this short list of useful links.

  - key: resources.other_surveys.takeaway.css2025
    t: >
      TODO

  ###########################################################################
  # Awards
  ###########################################################################

  - key: award.most_used_feature_award.comment
    t: |
      With {value} usage, `:has()` has been widely adopted by the community!

  - key: award.least_used_feature_award.comment
    t: |
      With only {value} usage, `sibling-count` is still far from mainstream.

  - key: award.most_loved_feature_award.comment
    t: |
      With {value} of respondents having a positive impression of `:has()`, it takes the top spot in our rankings.

  - key: award.most_hated_feature_award.comment
    t: |
      Only {value} of respondents truly hate trigonometry, yet that's enough to put **Trigonometric Functions** dead last in terms of being loved :(

  - key: award.largest_awareness_progression_award.comment
    t: |
      Compared to last year, {value} more respondents are no longer in the dark about `light-dark()`!

  - key: award.largest_usage_progression_award.comment
    t: |
      With a {value} usage increase, `text-wrap: pretty` is doing pretty, pretty good!

  - key: award.most_commented_feature_award.comment
    t: |
      **Subgrid** got over {value} comments, in part because it appeared early on in the survey, but also because it's definitely a praise-worthy feature!

  ###########################################################################
  # FAQ/About
  ###########################################################################

  - key: faq.how_long_will_survey_take_css2025
    aliasFor: faq.how_long_will_survey_take_css2024
  - key: faq.how_long_will_survey_take_css2025.description
    aliasFor: faq.how_long_will_survey_take_css2024.description

  - key: faq.learn_more_css2025
    t: Where can I learn more?
  - key: faq.learn_more_css2025.description
    t: You can learn more about this survey in [our announcement post](https://dev.to/sachagreif/the-2024-state-of-css-survey-is-now-open-4o5h).

  - key: faq.survey_design_css2025
    t: How was this survey designed?
  - key: faq.survey_design_css2025.description
    t: >
      This survey was designed as the results of an [open design process](https://github.com/Devographics/surveys/issues/289) involving browser vendors and the web development community.

  - key: faq.results_released_css2025
    t: When will the results be released?
  - key: faq.results_released_css2025.description
    t: The survey will run from June 1 to July 1, 2025, and the survey results will be released shortly after.

  - key: about.content.css2025
    t: >
      The 2025 State of CSS survey ran from June 1 to July 15 2025, and collected 5,506 responses. The survey is run by [Devographics](https://www.devographics.com/), with help from a team of open-source contributors and consultants. 


      The State of CSS logo and t-shirt were designed and animated by [Christopher Kirk-Nielsen](http://chriskirknielsen.com/).


      ### Survey Goals

      This survey was created to identify upcoming trends in the web development ecosystem in order to help developers make technological choices. 


      As such, this survey is focused on anticipating what's coming over the next few years rather than analyzing what's popular now, which is why the features or technologies that are currently most widespread are not always included. 


      Additionally, survey data is also used by browser vendors to prioritize features and inform initiatives such as [Interop 2025](https://web.dev/blog/interop-2025).


      ### Survey Design

      This survey was designed collaboratively [on GitHub](https://github.com/Devographics/surveys/issues/245).

      ### Survey Audience

      The survey was openly accessible online and respondents were not filtered or selected in any way. Respondents were primarily a mix of respondents from past surveys (alerted through a dedicated mailing list) and social media traffic. 

      ### Project Funding

      Apart from t-shirt sales, funding from this project comes from a variety of sources:

      - Our partner [Frontend Masters](https://frontendmasters.com/) sponsors the survey in exchange for featuring relevant links to their courses at the bottom of each page.

      - The [Google Chrome](https://www.google.com/chrome/) team set aside a sponsoring budget this year to help design and run the survey.

      - [TokyoDev](https://www.tokyodev.com/) is also sponsoring the survey on an ongoing basis. 

      ### Technical Overview

      You can find a more in-depth technical overview of how the surveys are run [here](https://dev.to/sachagreif/how-the-devographics-surveys-are-run-2023-edition-1p6a). Our code is [open-source](https://github.com/Devographics/Monorepo/). 

      ### Feedback


      - [Report a technical issue](https://github.com/Devographics/Monorepo/issues)

      - [Make a suggestion for next year](https://github.com/Devographics/surveys/issues/249)

      - [Other non-technical issues](https://github.com/Devographics/surveys/issues)

      - [Join our Discord](https://discord.gg/tuWRUWVyJs)

  ###########################################################################
  # Picks
  ###########################################################################

  - key: picks.my_pick.css2025
    t: "My 2025 Pick: "
  - key: picks.intro
    t: We asked members of the CSS community to share their “pick of the year”

  # https://linear-easing-generator.netlify.app/
  - key: picks.josh_comeau.name
    t: |
      `linear()` Easing Generator
  - key: picks.josh_comeau.bio
    t: Indie developer and educator
  - key: picks.josh_comeau.description
    t: |
      Description: The `linear()` timing function has quickly become one of my favourite modern features, and this lovely tool makes it easy to quickly generate CSS springs from JS logic!

  # https://developer.mozilla.org/en-US/docs/Web/CSS/if
  - key: picks.ahmad_shadeed.name
    t: |
      `if()`
  - key: picks.ahmad_shadeed.bio
    t: Design Engineer, Author of [debuggingcss.com](https://debuggingcss.com)
  - key: picks.ahmad_shadeed.description
    t: |
      Combined with `:has()` and style queries, `if()` will help us do even more conditional stuff in CSS.

  # https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap
  - key: picks.kilian_valkhof.name
    t: |
      `text-wrap: balance;`
  - key: picks.kilian_valkhof.bio
    t: Creator of [Polypane](https://polypane.app/)
  - key: picks.kilian_valkhof.description
    t: |
      I can’t remember the last time a new CSS property was introduced that I could just add to any stylesheet new and old. It’s a little magic one liner that makes your titles much nicer with zero downsides. Add it to your css resets!

    # https://codepen.io/thebabydino/pen/LEExpVg
  - key: picks.ana_tudor.name
    t: Combining features
  - key: picks.ana_tudor.bio
    t: CSS Mad Scientist
  - key: picks.ana_tudor.description
    t: |
      My pick not as much a single feature that changes things, as it is the way multiple features can be used together.

      For example, subgrid + the new `corner-shape` (or the `shape()` clip-path function) to get content-dependant shapes with concave roundings that aren't necessarily circular.

  # https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units/Using_CSS_math_functions
  - key: picks.amit_sheen.name
    t: CSS Math Functions
  - key: picks.amit_sheen.bio
    t: Web Developer & Creative Coder
  - key: picks.amit_sheen.description
    t: |
      Math is the language of the universe, of life itself, and without it, we wouldn’t be able to describe, measure, or build anything with clarity. 

      So the fact that we can now use these functions natively in CSS only strengthens our capabilities and opens up a whole world of new possibilities.

  # https://miocene.io/
  - key: picks.sacha_greif.name
    t: Julia Miocene
  - key: picks.sacha_greif.bio
    t: Maintainer, State of CSS
  - key: picks.sacha_greif.description
    t: |
      When you spend days on end debugging a layout or styling forms, it's easy to forget that front end coding can also be enjoyed for its own sake. Julia's amazing work is a great reminder of the joy and creativity that can be found in CSS, if you just take the time to look.

  # https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API
  - key: picks.julia_miocene.name
    t: View Transition API
  - key: picks.julia_miocene.bio
    t: Product Designer, UX Engineer, Pure CSS Animator
  - key: picks.julia_miocene.description
    t: |
      My pick of the year is the View Transition API. It helped me get rid of JS code and complex animation tricks. Now I can animate generated content and user interactions with ease ✨

  # https://modern-fluid-typography.vercel.app/
  - key: picks.ana_rodrigues.name
    t: |
      Font Clamp Generators
  - key: picks.ana_rodrigues.bio
    t: Front-end developer at [Hactar.is](https://hactar.is/)
  - key: picks.ana_rodrigues.description
    t: |
      My pick of the year is all the font clamp generators that people have been creating and sharing. What’s great about them is that they are all so different so it accommodates different learning styles. Especially, if reading documentation alone doesn’t help understanding how something works.

  # - key: picks.xxx.name
  #   t:
  # - key: picks.xxx.bio
  #   t:
  # - key: picks.xxx.description
  #   t: |

  - key: frontendmasters.learning_path
    t: |
      Your Path to Becoming a Senior Web Developer

  - key: frontendmasters.learning_path.description
    t: |
      Want to upgrade your career? Deep-dive into JavaScript, React, Web performance, CSS, deploying websites, TypeScript, and functional programming to go from junior to senior today.

  # figures

  - key: figure.figure_has_usage.css2025
    t: Percentage of respondents who have used `:has()`.

  - key: figure.figure_light_dark_awareness.css2025
    t: Year-over-year increase in respondents who had heard about `light-dark()`.

  ###########################################################################
  # Conclusion
  ###########################################################################

  - key: conclusion.css2025.amit_sheen
    t: |

      <span class="first-line">This is not the CSS we used to know (and that's a good thing).</span>

      Looking through the survey results, it's clear that CSS is no longer “just” a styling language. It has made a fundamental shift in direction, taking on a larger role when it comes to layouts, motion, compatibility, and of course, accessibility. This shift helps redefine CSS’s identity not as a legacy styling language, but as a modern, expressive toolset that is finally getting the recognition it deserves.

      This shift has changed how we write CSS. Interactive web apps have overtaken static pages as the primary use case, native language features are replacing many framework and preprocessor abstractions, and the broader support across browsers has given developers the confidence to explore new capabilities. People are more willing to experiment now, testing features soon after they appear because they trust that improvements in standards and tooling will make adoption smoother.

      Another emblem of this transformation, one that the survey did not dwell on, is the newly redesigned CSS logo. For me it represents the start of a new chapter: the language has shed the number three from its badge and with it the notion of being anchored to a past version. In its place is a fresh, modern mark that signals confidence and readiness to move toward a brighter future.

      Even with that sense of renewal, the survey also reminds us where CSS still falls short. Despite the progress, many respondents still struggle with complex layout issues and the speed of change, and say that controlling height, overflow and alignment can be frustrating. There is a clear appetite for features like mixins, masonry layout and conditional logic that would bring more of the conveniences of preprocessors into the language itself. And while browser differences no longer dominate the complaint list, they have not disappeared entirely, so there is still work to do.

      Alongside those challenges, the survey highlights several successes. The `:has` selector, container queries and `subgrid` have moved from wish lists to everyday practice, and respondents rank them among the most loved features. New initiatives such as the Baseline indicator and the Interop project have boosted confidence that new capabilities will mature quickly, making early adoption feel less risky. That growing trust in the language and its ecosystem helps explain why satisfaction with CSS keeps climbing even as overall happiness with web technologies has held steady.

      Looking ahead, this moment feels like a beginning rather than an end. The survey shows a community that is ready to adopt new tools, eager to address remaining gaps and confident that the language will keep evolving. If we carry that curiosity and collaboration forward, CSS will continue to grow in ways we can barely imagine today and the next survey will reflect an even richer landscape.

      If 2025 was about stabilizing the impossible, 2026 may be about realizing long‑awaited dreams. For those who love CSS, there has never been a better time to experiment, learn and help shape what comes next.

  - key: conclusion.css2025.amit_sheen.bio
    t: Web Developer & Creative Coder
