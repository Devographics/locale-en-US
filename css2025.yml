locale: en-US
translations:
  - key: general.css2025.survey_intro
    t: |

      There is only one item on my CSS wishlist for 2025: a slower pace!

      After years of rapid innovation, now feels like the right time for browser vendors to take a beat to consolidate, fix browser inconsistencies, and let the rest of us catch up.  

      After all, we might've heard about subgrid, `:has()`, scroll-driven animations, and all the other recent CSS improvements – but how many of us can say that we've actually used all these features, let alone mastered them?

      This is why this year's survey will be so interesting. It'll be a chance to see which of the past few year's new CSS additions have already been adopted by the community, and which ones are still on our to-do list. 

      So once again, please join me for this year's State of CSS!

  ###########################################################################
  # Charts
  ###########################################################################

  - key: features.features_intro_css2025
    aliasFor: features.features_intro_css2024

  ###########################################################################
  # Sections Introductions
  ###########################################################################

  - key: sections.user_info.description.css2025
    t: |
      This year's survey reached **5,506** developers throughout the world.

  - key: sections.features.description.css2025
    t: |
      It's no secret that CSS is adding new features at a record rate – which is why we ended up asking about no less than *50* of them this year!

  - key: sections.tools.css2025
    t: Libraries & Tools

  - key: sections.tools.description.css2025
    t: |
      Despite the many capabilities unlocked by CSS's new features, developers still rely on tooling and libraries to support their workflow, at least for now.

  - key: sections.usage.description.css2025
    t: |
      No matter how you use CSS, the data shows that making sure your code works across all browsers is still a concern, especially for newer features such as `:has()`.

  - key: sections.resources.description.css2025
    t: |
      Rest assured: with the amount of new CSS features coming out, we won't run out of material for CSS blog posts, podcasts, videos, and courses anytime soon!

  ###########################################################################
  # Takeaways
  ###########################################################################

  # - key: user_info.country.takeaway.css2025
  #   t: >
  #     The survey remains U.S.-centric, but European countries continue

  - key: features.all_features.takeaway.css2025
    t: >
      Of all the features included in the survey, `:has()` is both the most-used and the most-loved one. Also worth pointing out: **Subgrid** gets second place in the most-loved rankings, while `aspect-ratio` is #2 in usage and #3 in sentiment.


      After **Subgrid**, `line-clamp` got the most comments, many of them from respondents with a negative opinion of the feature.


      The least-used features were `sibling-count` and `sibling-index`, which makes sense since their browser support is still very new and limited. 


      Finally, the least-loved feature overall was **Trigonometric Functions**, mostly due to the “trigonometry” part.

  - key: features.features_ratios_over_time.takeaway.css2025
    t: >
      Looking at trends over time and in context paints quite an interesting picture. The feature with the single largest year-over-year usage increase is `text-wrap: pretty`, while the one with the largest *awareness* increase is `light-dark()`.


      **Color functions** also stand out for placing towards the bottom of the chart in terms of usage, which might mean they haven't yet found their audience.


      Finally, the Appreciation tab lets us look at the difference in positivity between respondents interested in a feature and those who have actually used it. **Anchor positioning** shows a **-12%** drop-off, which could mean that the API isn't as user-friendly as people expect.

  - key: features.layout_pain_points.takeaway.css2025
    t: >
      While **Grid** is undeniably powerful, that power also comes with a steep learning curve that can turn using this fairly complex feature into a real pain point. 


      Further down the rankings, dealing with height, overflow, positioning, and alignment still all prove to be common issues for CSS developers.

  - key: features.shapes_graphics_pain_points.takeaway.css2025
    t: >
      Now that we're fairly comfortable with rectangles, we've started looking towards the wider world of triangles, circles, and polygons. Sadly drawing these **complex shapes** remains tough with CSS only. 


      Which is why many of us resort to **SVG**–which is not without its own issues.

  - key: features.colors_pain_points.takeaway.css2025
    t: >
      Many respondents would like CSS to go beyond the light/dark dichotomy, and actually provide more tools for managing full-fledged theming, as well as do a better job ensuring proper **contrast** when picking colors.  


      And while new color spaces such as `oklch()` are certainly powerful, they also come with their own range of issues.

  - key: features.interactions_pain_points.takeaway.css2025
    t: >
      While many of us are waiting for better browser support for **scroll-driven animations**, others are pointing out potential **accessibility issues** with new interaction patterns such as **carousels**.


      Another common pain point was the difficulty of “animating to `auto`”, something that is thankfully [now possible](https://developer.chrome.com/docs/css-ui/animate-to-height-auto)!

  - key: features.typography_pain_points.takeaway.css2025
    t: >
      Controlling vertical text alignment (a.k.a. **leading**) in the browser has been an issue for as long as I can remember. Thankfully `text-box-edge` and `text-box-trim` promise to give us more granular tools to properly set type online.

  - key: features.math_features_pain_points.takeaway.css2025
    t: >
      Many respondents has gripes about `calc()`, especially when it comes to handling units inside calculations.

  - key: features.other_features_pain_points.takeaway.css2025
    t: >
      No surprise here, but **Browser Support** remains the top pain point for the CSS features mentioned in this section.

  - key: features.reading_list.takeaway.css2025
    t: >
      Little-known `::target-text` (only 82% of respondents had never heard of it) tops the Reading List rankings of the features respondents were most curious about.

  # other_tools

  - key: tools.css_frameworks.takeaway.css2025
    t: >
      Tailwind tops the framework rankings, although many also use a custom or in-house framework. 


      That being said, it's also worth nothing that **47%** of survey respondents either don't use a framework, or skipped the question altogether.

  - key: tools.css_in_js.takeaway.css2025
    t: >
      **CSS Modules**' fairly light touch continues to prove popular, while **Styled Components** still holds on at number two.

  - key: tools.pre_post_processors.takeaway.css2025
    t: >
      **Sass** is still number one, but pre-processor usage overall is slowly decreasing as CSS itself adopts more and more of their features.

  - key: tools.utilities.takeaway.css2025
    t: >
      Using **Prettier** is a safe bet for any developer–but the list below contains many other lesser-known tools that are also worth checking out.

  - key: tools.browsers.takeaway.css2025
    t: >
      When it comes to browsers, the big four are the big four for a reason, and they maintained almost identical usage numbers compared to last year.

  # usage

  - key: usage.form_factors.takeaway.css2025
    t: >
      todo

  - key: usage.what_do_you_use_css_for.takeaway.css2025
    t: >
      todo

  - key: usage.industry_sector.takeaway.css2025
    t: >
      todo

  - key: usage.css_interoperability_features.takeaway.css2025
    t: >
      todo

  - key: usage.css_missing_features.takeaway.css2025
    t: >
      todo

  - key: usage.css_general_pain_points.takeaway.css2025
    t: >
      todo

  - key: usage.favorite_new_features.takeaway.css2025
    t: >
      todo

  - key: usage.gamechanger_feature.takeaway.css2025
    t: >
      todo

  - key: usage.baseline_awareness.takeaway.css2025
    t: >
      todo

  - key: usage.css_pace_of_change.takeaway.css2025
    t: >
      todo

  - key: usage.state_of_the_web_happiness.takeaway.css2025
    t: >
      todo

  - key: usage.state_of_css_happiness.takeaway.css2025
    t: >
      todo

  ###########################################################################
  # FAQ/About
  ###########################################################################

  - key: faq.how_long_will_survey_take_css2025
    aliasFor: faq.how_long_will_survey_take_css2024
  - key: faq.how_long_will_survey_take_css2025.description
    aliasFor: faq.how_long_will_survey_take_css2024.description

  - key: faq.learn_more_css2025
    t: Where can I learn more?
  - key: faq.learn_more_css2025.description
    t: You can learn more about this survey in [our announcement post](https://dev.to/sachagreif/the-2024-state-of-css-survey-is-now-open-4o5h).

  - key: faq.survey_design_css2025
    t: How was this survey designed?
  - key: faq.survey_design_css2025.description
    t: >
      This survey was designed as the results of an [open design process](https://github.com/Devographics/surveys/issues/289) involving browser vendors and the web development community.

  - key: faq.results_released_css2025
    t: When will the results be released?
  - key: faq.results_released_css2025.description
    t: The survey will run from June 1 to July 1, 2025, and the survey results will be released shortly after.
