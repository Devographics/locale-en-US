---
locale: en-US
namespace: js
translations:
  - 
    ###########################################################################
    #General
    ###########################################################################
    key: general.state_of_js.intro
    t: >
      The JavaScript world could use a bit of classification.

      Since 2016, this survey has collected data from over 20,000 developers each year to identify current and upcoming trends.

      Together, let's find out which libraries developers want to learn next, which have the best satisfaction ratings, and much more.
  - 
    key: general.state_of_js.description
    t: The annual developer survey of the JavaScript ecosystem
  - 
    ###########################################################################
    #Sections
    ###########################################################################
    key: sections.syntax.title
    t: Syntax
  - 
    key: sections.syntax.description
    t: The grammar of JavaScript.
  - 
    key: sections.language.title
    t: Language
  - 
    key: sections.language.description
    t: The vocabulary of JavaScript.
  - 
    key: sections.data_structures.title
    t: Data Structures
  - 
    key: sections.data_structures.description
    t: How you store and manipulate data.
  - 
    key: sections.browser_apis.title
    t: Browser APIs
  - 
    key: sections.browser_apis.description
    t: The features provided by the browser.
  - 
    key: sections.other_features.title
    t: Other Features
  - 
    key: sections.other_features.description
    t: Other technologies and patterns
  - 
    key: sections.patterns.title
    t: Patterns
  - 
    key: sections.patterns.description
    t: How you prefer writing code
  - 
    key: sections.javascript_flavors.title
    t: JavaScript Flavors
  - 
    key: sections.javascript_flavors.description
    t: Languages that compile to JavaScript
  - 
    key: sections.front_end_frameworks.title
    t: Front-end Frameworks
  - 
    key: sections.front_end_frameworks.description
    t: Front-end frameworks and libraries
  - 
    key: sections.datalayer.title
    t: Data Layer
  - 
    key: sections.datalayer.description
    t: Loading and managing data in your app
  - 
    key: sections.back_end_frameworks.title
    t: Back-end Frameworks
  - 
    key: sections.back_end_frameworks.description
    t: JavaScript on the server
  - 
    key: sections.testing.title
    t: Testing
  - 
    key: sections.testing.description
    t: Tools for testing your code
  - 
    key: sections.mobile_desktop.title
    t: Mobile & Desktop
  - 
    key: sections.mobile_desktop.description
    t: JavaScript for mobile devices and desktop apps
  - 
    key: sections.build_tools.title
    t: Build Tools
  - 
    key: sections.build_tools.description
    t: Compiling & bundling code
  - 
    key: sections.monorepo_tools.title
    t: Monorepo Tools
  - 
    key: sections.monorepo_tools.description
    t: Tools used to manage JavaScript monorepos.
  - 
    key: sections.tools_others.title
    t: Other Tools
  - 
    key: sections.tools_others.description
    t: Other JavaScript tools
  - 
    key: sections.other_tools.title
    t: Other Tools
  - 
    key: sections.other_tools.description
    t: For these tools & technologies, just check the ones that you use regularly.
  - 
    ###########################################################################
    #Options
    ###########################################################################
    #JS pain points
    #- key: options.js_pain_points.browser_interoperability
    #t: Browser Compatibility
    #- key: options.js_pain_points.browser_interoperability.description
    #t: Differences between Chrome, Safari, Firefox, etc.
    #- key: options.js_pain_points.animations
    #t: Animations
    #- key: options.js_pain_points.animations.description
    #t: Managing animations, transitions, etc. using JavaScript.
    #- key: options.js_pain_points.form_handling
    #t: Form Handling
    #- key: options.js_pain_points.form_handling.description
    #t: Creating forms, managing their state and errors, and saving their data.
    key: options.js_pain_points.state_management
    t: State Management
  - 
    key: options.js_pain_points.state_management.description
    t: Managing global data state in complex applications.
  - 
    #- key: options.js_pain_points.performance_issues
    #t: Performance Issues
    #- key: options.js_pain_points.performance_issues.description
    #t: Bundle sizes, slow loading, and other performance issues.
    key: options.js_pain_points.managing_dependencies
    t: Managing Dependencies
  - 
    key: options.js_pain_points.managing_dependencies.description
    t: Managing dependencies, package versions and bundle sizes.
  - 
    key: options.js_pain_points.architecture
    t: Code Architecture
  - 
    key: options.js_pain_points.architecture.description
    t: Organizing and maintaining your codebase.
  - 
    key: options.js_pain_points.finding_packages
    t: Finding Packages
  - 
    key: options.js_pain_points.finding_packages.description
    t: Finding and evaluating JavaScript packages.
  - 
    key: options.js_pain_points.writing_modules
    t: Writing Modules
  - 
    key: options.js_pain_points.writing_modules.description
    t: Writing JavaScript modules and publishing them as packages.
  - 
    key: options.js_pain_points.debugging
    t: Debugging
  - 
    key: options.js_pain_points.debugging.description
    t: Identifying and solving issues with your code.
  - 
    key: options.js_pain_points.async_code
    t: Async Code
  - 
    key: options.js_pain_points.async_code.description
    t: Handling asynchronous functions.
  - 
    key: options.js_pain_points.modules_management
    t: Modules Management
  - 
    key: options.js_pain_points.modules_management.description
    t: Writing and importing modules.
  - 
    key: options.js_pain_points.date_management
    t: Date Management
  - 
    key: options.js_pain_points.date_management.description
    t: Handling and manipulating dates and times.
  - 
    #- key: options.js_pain_points.xxx
    #t:
    #- key: options.js_pain_points.xxx.description
    #t:
    #JS missing features
    key: options.currently_missing_from_js.static_typing
    t: Static Typing
  - 
    key: options.currently_missing_from_js.static_typing.description
    t: Native types (similar to what TypeScript offers).
  - 
    key: options.currently_missing_from_js.standard_library
    t: Standard Library
  - 
    key: options.currently_missing_from_js.standard_library.description
    t: A standard library of common utilities
  - 
    key: options.currently_missing_from_js.pattern_matching
    t: Pattern Matching
  - 
    key: options.currently_missing_from_js.pattern_matching.description
    t: A new `match` keyword for pattern-matching objects.
  - 
    key: options.currently_missing_from_js.pipe_operator
    t: Pipe Operator
  - 
    key: options.currently_missing_from_js.pipe_operator.description
    t: A new `|>` operator for passing the result of one function to another.
  - 
    key: options.currently_missing_from_js.decorators
    t: Decorators
  - 
    key: options.currently_missing_from_js.decorators.description
    t: Decorators used to metaprogram and add functionality to a value.
  - 
    key: options.currently_missing_from_js.immutable_data_structures
    t: Immutable Data Structures
  - 
    key: options.currently_missing_from_js.immutable_data_structures.description
    t: New deeply immutable data structures such as `Record` and `Tuple`.
  - 
    key: options.currently_missing_from_js.better_date_management
    t: Better Date Management
  - 
    key: options.currently_missing_from_js.better_date_management.description
    t: A new `Temporal` object for working with dates and times.
  - 
    key: options.currently_missing_from_js.observable
    t: Observable
  - 
    key: options.currently_missing_from_js.observable.description
    t: A new `Observable`` type used to model push-based data sources.
  - 
    #- key: options.currently_missing_from_js.xxx
    #t:
    #- key: options.currently_missing_from_js.xxx.description
    #t:
    ###########################################################################
    #Features
    ###########################################################################
    #syntax
    key: features.destructuring
    t: Destructuring
  - 
    key: features.destructuring.description
    t: 'Example: `const { foo } = bar`'
  - 
    key: features.spread_operator
    t: Spread operator
  - 
    key: features.spread_operator.description
    t: 'Example: `[...array1, ...array2]`'
  - 
    key: features.arrow_functions
    t: Arrow Functions
  - 
    key: features.arrow_functions.description
    t: 'Example: `const foo = () => {}`'
  - 
    key: features.nullish_coalescing
    t: Nullish Coalescing
  - 
    key: features.nullish_coalescing.description
    t: >
      Example: `const foo = 0 ?? 42`
  - 
    key: features.optional_chaining
    t: Optional Chaining
  - 
    key: features.optional_chaining.description
    t: >
      Example: `const dogName = adventurer.dog?.name`
  - 
    key: features.private_fields
    t: Private Fields
  - 
    key: features.private_fields.description
    t: >
      Example: `class ClassWithPrivateField { #privateField }` #privateField }`
  - 
    #language
    key: features.proxies
    t: Proxies
  - 
    key: features.async_await
    t: Async/Await
  - 
    key: features.promises
    t: Promises
  - 
    key: features.decorators
    t: Decorators
  - 
    key: features.decorators.description
    t: >
      In its simplest form, a decorator is simply a way of wrapping one piece of code with another — literally “decorating” it.
  - 
    key: features.dynamic_import
    t: Dynamic Import
  - 
    key: features.dynamic_import.description
    t: >
      Example: <code>await import('/modules/my-module.js')</code>
  - 
    key: features.promise_all_settled
    t: Promise.allSettled()
  - 
    key: features.big_int
    t: BigInt
  - 
    key: features.numeric_separators
    t: Numeric Separators
  - 
    key: features.string_replace_all
    t: String.prototype.replaceAll()
  - 
    key: features.string_match_all
    t: String.prototype.matchAll()
  - 
    key: features.logical_assignment
    t: Logical Assignment
  - 
    key: features.promise_any
    t: Promise.any()
  - 
    key: features.array_at
    t: Array.prototype.at()
  - 
    key: features.top_level_await
    t: Top-Level Await
  - 
    key: features.intl
    t: Intl
  - 
    key: features.custom_elements
    t: Custom Elements
  - 
    key: features.shadow_dom
    t: Shadow DOM
  - 
    key: features.page_visibility
    t: Page Visibility API
  - 
    key: features.broadcast_channel
    t: Broadcast Channel API
  - 
    key: features.geolocation
    t: Geolocation API
  - 
    key: features.file_system_access
    t: File System Access API
  - 
    key: features.web_share
    t: Web Share API
  - 
    key: features.webxr
    t: WebXR
  - 
    #data structures
    key: features.maps
    t: Maps
  - 
    key: features.sets
    t: Sets
  - 
    key: features.typed_arrays
    t: Typed Arrays
  - 
    key: array_prototype_flat
    t: Array.prototype.flat
  - 
    #browser apis
    key: features.service_workers
    t: Service Workers
  - 
    key: features.local_storage
    t: LocalStorage
  - 
    key: features.i18n
    t: i18n
  - 
    key: features.web_components
    t: Web Components
  - 
    key: features.web_audio
    t: Web Audio API
  - 
    key: features.webgl
    t: WebGL
  - 
    key: features.web_animations
    t: Web Animations API
  - 
    key: features.webrtc
    t: WebRTC
  - 
    key: features.web_speech
    t: Web Speech API
  - 
    key: features.webvr
    t: WebVR
  - 
    key: features.websocket
    t: Websocket
  - 
    key: features.fetch
    t: Fetch API
  - 
    #other features
    key: features.pwa
    t: Progressive Web Apps (PWA)
  - 
    key: features.wasm
    t: WebAssembly (WASM)
  - 
    #patterns
    key: patterns.object_oriented_programming
    t: Object-Oriented Programming
  - 
    key: features.functional_programming
    t: Functional Programming
  - 
    key: features.reactive_programming
    t: Reactive Programming
  - 
    #upcoming features
    #- key: features.static_typing
    #t: Static Typing
    #- key: features.standard_library
    #t: Standard Library
    #- key: features.pattern_matching
    #t: Pattern Matching
    #- key: features.pipe_operator
    #t: Pipe Operator
    #- key: features.immutable_data_structures
    #t: Immutable Data Structures
    ###########################################################################
    #Tools
    ###########################################################################
    key: tools.angular.description
    t: >
      Note that this question only targets [Angular](https://angular.io/) experience, and specifically does *not* apply to the deprecated [AngularJS](https://angularjs.org/).
  - 
    ###########################################################################
    #Other Tools
    ###########################################################################
    key: tools_others.runtimes
    t: JavaScript Runtimes
  - 
    key: tools_others.runtimes.description
    t: Which engines/runtimes/execution environments do you regularly use?
  - 
    key: tools_others.runtimes.others
    t: Other Runtimes
  - 
    key: tools_others.runtimes.others.description
    t: Other answers (freeform field).
  - 
    key: tools_others.package_registries
    t: Package Registries
  - 
    key: tools_others.package_registries.description
    t: Which package registries do you regularly fetch packages from?
  - 
    key: tools_others.package_registries.others
    t: Other Package Registries
  - 
    key: tools_others.package_registries.others.description
    t: Other answers (freeform field).
  - 
    key: tools_others.form_factors
    aliasFor: environments.form_factors
  - 
    key: tools_others.form_factors.description
    aliasFor: environments.form_factors.description
  - 
    ###########################################################################
    #Opinions
    ###########################################################################
    key: opinions.js_moving_in_right_direction
    t: JavaScript is moving in the right direction
  - 
    key: opinions.building_js_apps_overly_complex
    t: Building JavaScript apps is overly complex right now
  - 
    key: opinions.js_over_used_online
    t: JavaScript is over-used online
  - 
    key: opinions.enjoy_building_js_apps
    t: I enjoy building JavaScript apps
  - 
    key: opinions.would_like_js_to_be_main_lang
    t: I would like JavaScript to be my main programming language
  - 
    key: opinions.js_ecosystem_changing_to_fast
    t: The JavaScript ecosystem is changing too fast
  - 
    key: opinions_others.missing_from_js.others
    t: What do you feel is currently missing from JavaScript?
  - 
    key: opinions_others.missing_from_js.others.description
    t: Features you'd like to see in JavaScript one day.
  - 
    key: happiness.front_end_frameworks
    t: How happy are you with the state of front end frameworks?
  - 
    key: happiness.back_end_frameworks
    t: How happy are you with the state of back end frameworks?
  - 
    key: happiness.testing
    t: How happy are you with the state of testing tools?
  - 
    key: happiness.mobile_desktop
    t: How happy are you with the state of mobile & desktop frameworks?
  - 
    key: happiness.build_tools
    t: How happy are you with the state of build tools?
  - 
    key: happiness.monorepo_tools
    t: How happy are you with the state of monorepo tools?
  - 
    key: happiness.state_of_the_web
    t: How happy are you with the general state of web technologies?
  - 
    key: happiness.state_of_js
    t: How happy are you with the general state of JavaScript?
  - 
    #Pain Points
    key: opinions.js_pain_points
    t: JavaScript Pain Points
  - 
    key: opinions.js_pain_points.description
    t: For each matchup, pick the aspect of JavaScript you struggle with the most.
  - 
    key: opinions_others.js_pain_points.others
    t: Other JavaScript Pain Points
  - 
    #Missing Features
    key: opinions.currently_missing_from_js
    t: What do you feel is currently missing from JavaScript?
  - 
    key: opinions.currently_missing_from_js.description
    t: For each matchup, pick the feature you'd most like to be able to use in JavaScript today.
  - 
    key: opinions_others.currently_missing_from_js.others
    t: Other Missing Features
  - 
    #pain points/currently missing (results)
    key: js_pain_points.js_pain_points_wins
    t: JavaScript Pain Points
  - 
    key: js_pain_points.js_pain_points_wins.description
    t: Which aspect of JavaScript do you struggle with the most? Results are ranked by number of tournament rounds won.
  - 
    key: js_pain_points.js_pain_points_matchups
    t: JavaScript Pain Points (Matchups)
  - 
    key: js_pain_points.js_pain_points_matchups.description
    t: Which aspect of JavaScript do you struggle with the most? Percentage of rounds won by left-hand item against top-side item.
  - 
    key: currently_missing_from_js.currently_missing_from_js_wins
    t: Features Missing From JavaScript
  - 
    key: currently_missing_from_js.currently_missing_from_js_wins.description
    t: Which feature would you most like to be able to use in JavaScript today? Results are ranked by number of tournament rounds won.
  - 
    key: currently_missing_from_js.currently_missing_from_js_matchups
    t: Features Missing From JavaScript (Matchups)
  - 
    key: currently_missing_from_js.currently_missing_from_js_matchups.description
    t: Which feature would you most like to be able to use in JavaScript today? Percentage of rounds won by left-hand item against top-side item.
  - 
    ###########################################################################
    #Resources
    ###########################################################################
    key: resources.first_steps_js
    t: First Steps With JavaScript
  - 
    key: resources.first_steps_js.description
    t: When first starting out, how did you initially learn JavaScript?
